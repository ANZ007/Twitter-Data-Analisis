{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f28fdfa2-c8f3-492b-b694-9d7b05ae89eb",
   "metadata": {},
   "source": [
    "# Klasifikasi Support Vector Machine (SVM)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f599b05-0a7b-4cd3-a6d8-1c7a637d1aec",
   "metadata": {},
   "source": [
    "## Import module / package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e71c8d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import csv\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import model_selection\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn import svm\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9c4ccbde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>polaritas</th>\n",
       "      <th>sentimen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>['jbharga', 'ayam', 'rm', 'tgk', 'telor', 'wya...</td>\n",
       "      <td>-2</td>\n",
       "      <td>Negatif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>['diri', 'di', 'atas', 'kaki', 'sendiri', 'ser...</td>\n",
       "      <td>-2</td>\n",
       "      <td>Negatif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>['sebab', 'harga', 'telur', 'anjlok', 'versi',...</td>\n",
       "      <td>5</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>['turun', 'minta', 'masyarakat', 'telur', 'aya...</td>\n",
       "      <td>-1</td>\n",
       "      <td>Negatif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>['ternak', 'ayam', 'telur', 'aku', 'rugi', 'ra...</td>\n",
       "      <td>5</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet  polaritas sentimen\n",
       "0  ['jbharga', 'ayam', 'rm', 'tgk', 'telor', 'wya...         -2  Negatif\n",
       "1  ['diri', 'di', 'atas', 'kaki', 'sendiri', 'ser...         -2  Negatif\n",
       "2  ['sebab', 'harga', 'telur', 'anjlok', 'versi',...          5  Positif\n",
       "3  ['turun', 'minta', 'masyarakat', 'telur', 'aya...         -1  Negatif\n",
       "4  ['ternak', 'ayam', 'telur', 'aku', 'rugi', 'ra...          5  Positif"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r\"data/tweets_labelled_tokenized_sastrawi.csv\")\n",
    "df2 = pd.read_csv(r\"data/tweets_labelled_tokenized_ecs.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4f5af99d-6cf4-47d6-b34d-b34cee58c1d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>polaritas</th>\n",
       "      <th>sentimen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>['jbharga', 'ayam', 'rm', 'tgk', 'telor', 'wya...</td>\n",
       "      <td>-2</td>\n",
       "      <td>Negatif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>['diri', 'di', 'atas', 'kaki', 'sendiri', 'ser...</td>\n",
       "      <td>-2</td>\n",
       "      <td>Negatif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>['sebab', 'harga', 'telur', 'anjlok', 'versi',...</td>\n",
       "      <td>5</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>['turun', 'minta', 'masyarakat', 'telur', 'aya...</td>\n",
       "      <td>-1</td>\n",
       "      <td>Negatif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>['ternak', 'ayam', 'telur', 'menga', 'rugi', '...</td>\n",
       "      <td>4</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet  polaritas sentimen\n",
       "0  ['jbharga', 'ayam', 'rm', 'tgk', 'telor', 'wya...         -2  Negatif\n",
       "1  ['diri', 'di', 'atas', 'kaki', 'sendiri', 'ser...         -2  Negatif\n",
       "2  ['sebab', 'harga', 'telur', 'anjlok', 'versi',...          5  Positif\n",
       "3  ['turun', 'minta', 'masyarakat', 'telur', 'aya...         -1  Negatif\n",
       "4  ['ternak', 'ayam', 'telur', 'menga', 'rugi', '...          4  Positif"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86e30840-c89a-46f2-85b6-7ca0adb76d11",
   "metadata": {},
   "source": [
    "## Split Data (Test & Train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3be360e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_X_df, test_X_df, train_Y_df, test_Y_df = model_selection.train_test_split(df['tweet'], df['sentimen'], test_size = 0.1, random_state = 42)\n",
    "train_X_df2, test_X_df2, train_Y_df2, test_Y_df2 = model_selection.train_test_split(df2['tweet'], df2['sentimen'], test_size = 0.1, random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "93dab41b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train = pd.DataFrame()\n",
    "data_train['tweet'] = train_X_df\n",
    "data_train['sentimen'] = train_Y_df\n",
    "\n",
    "data_test = pd.DataFrame()\n",
    "data_test['tweet'] = test_X_df\n",
    "data_test['sentimen'] = test_Y_df\n",
    "\n",
    "data_train_2 = pd.DataFrame()\n",
    "data_train_2['tweet'] = train_X_df2\n",
    "data_train['sentimen'] = train_Y_df2\n",
    "\n",
    "data_test_2 = pd.DataFrame()\n",
    "data_test_2['tweet'] = test_X_df2\n",
    "data_test_2['sentimen'] = test_Y_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1747e350",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data_train.to_csv(r\"df_trainsvm.csv\")\n",
    "# data_test.to_csv(r\"df_testsvm.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fdac040-bc88-4a86-ae69-d83ddc8e4b3e",
   "metadata": {},
   "source": [
    "## TF-IDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "59cb2860",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "datatfidf = TfidfVectorizer(max_features = 5000)\n",
    "datatfidf.fit(df['tweet'].values.astype('U'))\n",
    "train_X_datatfidf = datatfidf.transform(data_train['tweet'].values.astype('U'))\n",
    "test_X_datatfidf = datatfidf.transform(data_test['tweet'].values.astype('U'))\n",
    "\n",
    "datatfidf2 = TfidfVectorizer(max_features = 5000)\n",
    "datatfidf2.fit(df2['tweet'].values.astype('U'))\n",
    "train_X_datatfidf2 = datatfidf2.transform(data_train_2['tweet'].values.astype('U'))\n",
    "test_X_datatfidf2 = datatfidf2.transform(data_test_2['tweet'].values.astype('U'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cbf76db9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TfidfVectorizer(max_features=5000)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datatfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1426548a-6d0b-4ffc-ae45-d264a2627367",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TfidfVectorizer(max_features=5000)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datatfidf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c3476f7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 4781)\t0.18114639034398547\n",
      "  (0, 4742)\t0.22587358336266655\n",
      "  (0, 4722)\t0.2953480977142051\n",
      "  (0, 4473)\t0.4627544001509437\n",
      "  (0, 4418)\t0.08709188462283354\n",
      "  (0, 4344)\t0.2285194482693565\n",
      "  (0, 4113)\t0.17902480560364156\n",
      "  (0, 4064)\t0.20662987874261438\n",
      "  (0, 4035)\t0.250620904695524\n",
      "  (0, 3840)\t0.24585345504849018\n",
      "  (0, 3703)\t0.17834473098894008\n",
      "  (0, 3287)\t0.250620904695524\n",
      "  (0, 3044)\t0.1986630207323622\n",
      "  (0, 2689)\t0.250620904695524\n",
      "  (0, 1804)\t0.03600160802253915\n",
      "  (0, 1738)\t0.2285194482693565\n",
      "  (0, 322)\t0.2024246901294352\n",
      "  (0, 291)\t0.2561245214083293\n",
      "  (1, 4496)\t0.2941626774279163\n",
      "  (1, 4418)\t0.07155204519427436\n",
      "  (1, 3000)\t0.21814606948845972\n",
      "  (1, 2192)\t0.271900020249518\n",
      "  (1, 1804)\t0.059155653720229746\n",
      "  (1, 1372)\t0.48529803958678436\n",
      "  (1, 919)\t0.48529803958678436\n",
      "  :\t:\n",
      "  (284, 2395)\t0.4169425820590046\n",
      "  (284, 1932)\t0.3984803471619017\n",
      "  (284, 1804)\t0.1790021586270341\n",
      "  (285, 4418)\t0.07058727603931923\n",
      "  (285, 4262)\t0.37042637084266117\n",
      "  (285, 3766)\t0.3985245186020071\n",
      "  (285, 2710)\t0.2763986117067806\n",
      "  (285, 2401)\t0.2226721679241953\n",
      "  (285, 2395)\t0.6116896414895878\n",
      "  (285, 1875)\t0.2985638015240654\n",
      "  (285, 1804)\t0.05835803081657233\n",
      "  (285, 1753)\t0.3260224540584224\n",
      "  (286, 4502)\t0.18816411541445033\n",
      "  (286, 4418)\t0.20464389311732575\n",
      "  (286, 4238)\t0.6939933014744402\n",
      "  (286, 3956)\t0.3683586853469235\n",
      "  (286, 1804)\t0.08459466982627176\n",
      "  (286, 402)\t0.38882661237329397\n",
      "  (286, 342)\t0.38348132479361663\n",
      "  (287, 4418)\t0.12180148046814217\n",
      "  (287, 2401)\t0.3842307174045091\n",
      "  (287, 1932)\t0.33625338976794594\n",
      "  (287, 1804)\t0.5034968729140752\n",
      "  (287, 1082)\t0.655869795521755\n",
      "  (287, 294)\t0.20196663911683543\n"
     ]
    }
   ],
   "source": [
    "print(test_X_datatfidf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dd352feb-1975-4540-8e73-c74d14dfcac4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 4777)\t0.17704496314159746\n",
      "  (0, 4736)\t0.22075946512191488\n",
      "  (0, 4705)\t0.2886609717944541\n",
      "  (0, 4473)\t0.4522769433205882\n",
      "  (0, 4418)\t0.08511999313760422\n",
      "  (0, 4339)\t0.22075946512191488\n",
      "  (0, 4108)\t0.17497141427626983\n",
      "  (0, 4059)\t0.2139844935660717\n",
      "  (0, 4029)\t0.24494646981413667\n",
      "  (0, 3858)\t0.24028696241001052\n",
      "  (0, 3732)\t0.17497141427626983\n",
      "  (0, 3310)\t0.24494646981413667\n",
      "  (0, 3112)\t0.2886609717944541\n",
      "  (0, 2677)\t0.24494646981413667\n",
      "  (0, 2566)\t0.2119899809105777\n",
      "  (0, 1873)\t0.03518647737492889\n",
      "  (0, 331)\t0.19784149016086128\n",
      "  (0, 300)\t0.2503254763525159\n",
      "  (1, 4495)\t0.2938734780165762\n",
      "  (1, 4418)\t0.07148170041249817\n",
      "  (1, 3031)\t0.21793160409321025\n",
      "  (1, 2241)\t0.27163270786819527\n",
      "  (1, 1873)\t0.05909749617154643\n",
      "  (1, 1419)\t0.4848209297487853\n",
      "  (1, 952)\t0.4848209297487853\n",
      "  :\t:\n",
      "  (284, 2395)\t0.4160745673246942\n",
      "  (284, 1993)\t0.397650768156175\n",
      "  (284, 1873)\t0.17862950177247555\n",
      "  (285, 4418)\t0.07063728735359037\n",
      "  (285, 4256)\t0.3706888191291797\n",
      "  (285, 3791)\t0.39880687451744795\n",
      "  (285, 2701)\t0.274020029072072\n",
      "  (285, 2420)\t0.22282993187818737\n",
      "  (285, 2395)\t0.6121230255867428\n",
      "  (285, 1934)\t0.2987753349468836\n",
      "  (285, 1873)\t0.058399377670894724\n",
      "  (285, 1822)\t0.32625344202571954\n",
      "  (286, 4498)\t0.18499179672193702\n",
      "  (286, 4418)\t0.20173328486947148\n",
      "  (286, 4232)\t0.6841227766497924\n",
      "  (286, 3953)\t0.3674962484454715\n",
      "  (286, 1873)\t0.08339149713457707\n",
      "  (286, 414)\t0.38329641096967765\n",
      "  (286, 354)\t0.4100414251173442\n",
      "  (287, 4418)\t0.12180148046814217\n",
      "  (287, 2420)\t0.3842307174045091\n",
      "  (287, 1993)\t0.33625338976794594\n",
      "  (287, 1873)\t0.5034968729140752\n",
      "  (287, 1119)\t0.655869795521755\n",
      "  (287, 303)\t0.20196663911683543\n"
     ]
    }
   ],
   "source": [
    "print(test_X_datatfidf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f8b8d434",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 4418)\t0.07803345685860627\n",
      "  (0, 3361)\t0.5292578784134025\n",
      "  (0, 2707)\t0.29245312878413354\n",
      "  (0, 2657)\t0.36515557207535365\n",
      "  (0, 2521)\t0.45897001490557\n",
      "  (0, 1804)\t0.0645141608459514\n",
      "  (0, 1375)\t0.5292578784134025\n",
      "  (1, 4418)\t0.15187379266291814\n",
      "  (1, 3068)\t0.5546959380320806\n",
      "  (1, 3039)\t0.6151512000347947\n",
      "  (1, 1915)\t0.5244711987880161\n",
      "  (1, 1804)\t0.12556165883941045\n",
      "  (2, 4741)\t0.2238290746880853\n",
      "  (2, 4675)\t0.2766413694238158\n",
      "  (2, 4408)\t0.09726327491723764\n",
      "  (2, 3700)\t0.3019411226419843\n",
      "  (2, 3631)\t0.3019411226419843\n",
      "  (2, 3145)\t0.22839750794087388\n",
      "  (2, 3048)\t0.2684966680691704\n",
      "  (2, 2997)\t0.18594270285918227\n",
      "  (2, 2324)\t0.3019411226419843\n",
      "  (2, 1982)\t0.13330976882100445\n",
      "  (2, 1804)\t0.03680526818141519\n",
      "  (2, 1734)\t0.18164364225709484\n",
      "  (2, 507)\t0.12157202169079674\n",
      "  :\t:\n",
      "  (2589, 4712)\t0.40158351601683423\n",
      "  (2589, 4418)\t0.17188136204705123\n",
      "  (2589, 1804)\t0.14210291692724994\n",
      "  (2589, 1297)\t0.84128777721634\n",
      "  (2589, 294)\t0.2850072173674986\n",
      "  (2590, 4502)\t0.08878780196422441\n",
      "  (2590, 4478)\t0.30003135301261813\n",
      "  (2590, 4418)\t0.04828200482134449\n",
      "  (2590, 3654)\t0.2778784678099969\n",
      "  (2590, 3332)\t0.22593441071601808\n",
      "  (2590, 3280)\t0.21531494388332886\n",
      "  (2590, 2924)\t0.13018972681955857\n",
      "  (2590, 2723)\t0.24275378719422724\n",
      "  (2590, 2702)\t0.3114195019234774\n",
      "  (2590, 2635)\t0.3114195019234774\n",
      "  (2590, 2372)\t0.2504396244990985\n",
      "  (2590, 2331)\t0.22026963743779185\n",
      "  (2590, 2294)\t0.2451536663908213\n",
      "  (2590, 2124)\t0.2504396244990985\n",
      "  (2590, 1804)\t0.0798342954523533\n",
      "  (2590, 1112)\t0.25654181530168063\n",
      "  (2590, 294)\t0.0800594065532751\n",
      "  (2590, 261)\t0.2911980184596277\n",
      "  (2590, 193)\t0.10945640786159958\n",
      "  (2590, 84)\t0.21416744663520978\n"
     ]
    }
   ],
   "source": [
    "print(train_X_datatfidf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "411c217e-4f73-4802-a422-739a9de73f92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 4418)\t0.07689427256483548\n",
      "  (0, 3383)\t0.5215314199593644\n",
      "  (0, 2696)\t0.3185981471706447\n",
      "  (0, 2644)\t0.3598247882136971\n",
      "  (0, 2538)\t0.4637640852866119\n",
      "  (0, 1873)\t0.06357234022541067\n",
      "  (0, 1422)\t0.5215314199593644\n",
      "  (1, 4418)\t0.15107149083926644\n",
      "  (1, 3098)\t0.5517656525967055\n",
      "  (1, 3072)\t0.6119015483275719\n",
      "  (1, 1976)\t0.5317038321680888\n",
      "  (1, 1873)\t0.12489835580271616\n",
      "  (2, 4734)\t0.23362000784078968\n",
      "  (2, 4669)\t0.2887424655797807\n",
      "  (2, 4407)\t0.10151785276533377\n",
      "  (2, 3766)\t0.2578489137639479\n",
      "  (2, 3730)\t0.31514890340933943\n",
      "  (2, 3655)\t0.31514890340933943\n",
      "  (2, 3028)\t0.19407637618318827\n",
      "  (2, 2042)\t0.13932925583400038\n",
      "  (2, 1873)\t0.03841523739981886\n",
      "  (2, 1803)\t0.1895892621969142\n",
      "  (2, 1163)\t0.2802414913565493\n",
      "  (2, 521)\t0.1277151604984293\n",
      "  (2, 276)\t0.6302978068186789\n",
      "  :\t:\n",
      "  (2589, 4706)\t0.40158351601683423\n",
      "  (2589, 4418)\t0.17188136204705123\n",
      "  (2589, 1873)\t0.14210291692724994\n",
      "  (2589, 1337)\t0.84128777721634\n",
      "  (2589, 303)\t0.2850072173674986\n",
      "  (2590, 4498)\t0.08810324472361068\n",
      "  (2590, 4477)\t0.30984715157742404\n",
      "  (2590, 4418)\t0.048038230020729565\n",
      "  (2590, 3681)\t0.27647546542150425\n",
      "  (2590, 3355)\t0.22479367275105278\n",
      "  (2590, 3303)\t0.21422782337727717\n",
      "  (2590, 2956)\t0.13007566568886483\n",
      "  (2590, 2716)\t0.24152812856031677\n",
      "  (2590, 2689)\t0.30984715157742404\n",
      "  (2590, 2621)\t0.30984715157742404\n",
      "  (2590, 2369)\t0.2552465412113448\n",
      "  (2590, 2338)\t0.2191575007908857\n",
      "  (2590, 2324)\t0.2439158908186268\n",
      "  (2590, 2175)\t0.24917516023846467\n",
      "  (2590, 1873)\t0.07943121381711171\n",
      "  (2590, 1148)\t0.2552465412113448\n",
      "  (2590, 303)\t0.07965518833694193\n",
      "  (2590, 268)\t0.2897277659472865\n",
      "  (2590, 197)\t0.10898373645126552\n",
      "  (2590, 84)\t0.21308611981800554\n"
     ]
    }
   ],
   "source": [
    "print(train_X_datatfidf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b57efe91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(288, 5000)\n",
      "(2591, 5000)\n",
      "(288, 5000)\n",
      "(2591, 5000)\n"
     ]
    }
   ],
   "source": [
    "print(test_X_datatfidf.shape)\n",
    "print(train_X_datatfidf.shape)\n",
    "print(test_X_datatfidf2.shape)\n",
    "print(train_X_datatfidf2.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d6bd8c7-d802-4d75-8f28-a02d0f4292d7",
   "metadata": {},
   "source": [
    "## Klasifikasi SVM (Kernel Linear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8ec2fabf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "model = SVC(kernel='linear')\n",
    "model2 = SVC(kernel='linear')\n",
    "model.fit(train_X_datatfidf,train_Y_df)\n",
    "model2.fit(train_X_datatfidf2,train_Y_df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d0ff4f24",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "predictionsSVM = model.predict(test_X_datatfidf)\n",
    "predictionsSVM2 = model2.predict(test_X_datatfidf2)\n",
    "\n",
    "test_prediction = pd.DataFrame()\n",
    "test_prediction['tweet'] = test_X_df\n",
    "test_prediction['sentimen'] = predictionsSVM\n",
    "test_prediction_2 = pd.DataFrame()\n",
    "test_prediction_2['tweet'] = test_X_df2\n",
    "test_prediction_2['sentimen'] = predictionsSVM2\n",
    "\n",
    "SVMaccuracy = accuracy_score(predictionsSVM, test_Y_df)*100\n",
    "SVMaccuracy = round(SVMaccuracy,1)\n",
    "SVMaccuracy2 = accuracy_score(predictionsSVM2, test_Y_df2)*100\n",
    "SVMaccuracy2 = round(SVMaccuracy2,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e189b717",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>sentimen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>471</th>\n",
       "      <td>['salah', 'solusi', 'pecah', 'turunya', 'harga...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1453</th>\n",
       "      <td>['harga', 'telur', 'ayam', 'kota', 'cimahi', '...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2377</th>\n",
       "      <td>['coba', 'mikir', 'ala', 'ternak', 'ditangkaph...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1601</th>\n",
       "      <td>['harga', 'telur', 'prediksi', 'rp', 'kg', 'ja...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1094</th>\n",
       "      <td>['harga', 'telur', 'untung', 'produsen', 'obat...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1097</th>\n",
       "      <td>['baik', 'harga', 'telur', 'ternak', 'serap', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1425</th>\n",
       "      <td>['harga', 'jagung', 'murah', 'tani', 'sengsara...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1764</th>\n",
       "      <td>['habis', 'harga', 'ikan', 'mahal', 'sardin', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1127</th>\n",
       "      <td>['baik', 'harga', 'telur', 'supays', 'telur', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2504</th>\n",
       "      <td>['harga', 'dedak', 'harga', 'jagung', 'harga',...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>288 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  tweet sentimen\n",
       "471   ['salah', 'solusi', 'pecah', 'turunya', 'harga...  Positif\n",
       "1453  ['harga', 'telur', 'ayam', 'kota', 'cimahi', '...  Positif\n",
       "2377  ['coba', 'mikir', 'ala', 'ternak', 'ditangkaph...  Positif\n",
       "1601  ['harga', 'telur', 'prediksi', 'rp', 'kg', 'ja...  Positif\n",
       "1094  ['harga', 'telur', 'untung', 'produsen', 'obat...  Positif\n",
       "...                                                 ...      ...\n",
       "1097  ['baik', 'harga', 'telur', 'ternak', 'serap', ...  Positif\n",
       "1425  ['harga', 'jagung', 'murah', 'tani', 'sengsara...  Positif\n",
       "1764  ['habis', 'harga', 'ikan', 'mahal', 'sardin', ...  Positif\n",
       "1127  ['baik', 'harga', 'telur', 'supays', 'telur', ...  Positif\n",
       "2504  ['harga', 'dedak', 'harga', 'jagung', 'harga',...  Positif\n",
       "\n",
       "[288 rows x 2 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3338431c-0fb5-4192-83b6-e0485c20030d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>sentimen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>471</th>\n",
       "      <td>['salah', 'solusi', 'mecah', 'turu', 'harga', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1453</th>\n",
       "      <td>['harga', 'telur', 'ayam', 'kota', 'cimahi', '...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2377</th>\n",
       "      <td>['coba', 'mikir', 'ala', 'ternak', 'ditangkaph...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1601</th>\n",
       "      <td>['harga', 'telur', 'prediksi', 'rp', 'kg', 'ja...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1094</th>\n",
       "      <td>['harga', 'telur', 'untung', 'produsen', 'obat...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1097</th>\n",
       "      <td>['baik', 'harga', 'telur', 'ternak', 'serap', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1425</th>\n",
       "      <td>['harga', 'jagung', 'murah', 'tan', 'sengsara'...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1764</th>\n",
       "      <td>['habis', 'harga', 'ikan', 'mahal', 'sardin', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1127</th>\n",
       "      <td>['baik', 'harga', 'telur', 'supays', 'telur', ...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2504</th>\n",
       "      <td>['harga', 'dedak', 'harga', 'jagung', 'harga',...</td>\n",
       "      <td>Positif</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>288 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  tweet sentimen\n",
       "471   ['salah', 'solusi', 'mecah', 'turu', 'harga', ...  Positif\n",
       "1453  ['harga', 'telur', 'ayam', 'kota', 'cimahi', '...  Positif\n",
       "2377  ['coba', 'mikir', 'ala', 'ternak', 'ditangkaph...  Positif\n",
       "1601  ['harga', 'telur', 'prediksi', 'rp', 'kg', 'ja...  Positif\n",
       "1094  ['harga', 'telur', 'untung', 'produsen', 'obat...  Positif\n",
       "...                                                 ...      ...\n",
       "1097  ['baik', 'harga', 'telur', 'ternak', 'serap', ...  Positif\n",
       "1425  ['harga', 'jagung', 'murah', 'tan', 'sengsara'...  Positif\n",
       "1764  ['habis', 'harga', 'ikan', 'mahal', 'sardin', ...  Positif\n",
       "1127  ['baik', 'harga', 'telur', 'supays', 'telur', ...  Positif\n",
       "2504  ['harga', 'dedak', 'harga', 'jagung', 'harga',...  Positif\n",
       "\n",
       "[288 rows x 2 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_prediction_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d86f0f0c-4803-4e67-a43e-a66b8149bf3e",
   "metadata": {},
   "source": [
    "## Mengecek Akurasi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fe7ad477",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Akurasi SVM :  90.6 %\n"
     ]
    }
   ],
   "source": [
    "print(\"Akurasi SVM : \",SVMaccuracy, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2348146b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Support Vector Machine Acuracy: 90.625 %\n",
      "Support Vector Machine Precision: 91.53225806451613 %\n",
      "Support Vector Machine Recall: 97.42489270386267 %\n",
      "Support Vector Machine f1_score: 94.38669438669439 %\n",
      "====================================================\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     Negatif       0.85      0.62      0.72        55\n",
      "     Positif       0.92      0.97      0.94       233\n",
      "\n",
      "    accuracy                           0.91       288\n",
      "   macro avg       0.88      0.80      0.83       288\n",
      "weighted avg       0.90      0.91      0.90       288\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "print(\"Support Vector Machine Acuracy:\", accuracy_score(test_Y_df, predictionsSVM)*100, \"%\")\n",
    "print(\"Support Vector Machine Precision:\", precision_score(test_Y_df, predictionsSVM, average=\"binary\", pos_label=\"Positif\")*100, \"%\")\n",
    "print(\"Support Vector Machine Recall:\", recall_score(test_Y_df, predictionsSVM, average=\"binary\", pos_label=\"Positif\")*100, \"%\")\n",
    "print(\"Support Vector Machine f1_score:\", f1_score(test_Y_df, predictionsSVM, average=\"binary\", pos_label=\"Positif\")*100, \"%\")\n",
    "print('====================================================\\n')\n",
    "print (classification_report(test_Y_df, predictionsSVM))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ee122c98-0066-414c-9d51-8f107e2d370a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Akurasi SVM :  89.6 %\n"
     ]
    }
   ],
   "source": [
    "print(\"Akurasi SVM : \",SVMaccuracy2, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dc74440b-5a1a-4849-a801-9dfc286d537e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Support Vector Machine Acuracy: 89.58333333333334 %\n",
      "Support Vector Machine Precision: 90.2834008097166 %\n",
      "Support Vector Machine Recall: 97.37991266375546 %\n",
      "Support Vector Machine f1_score: 93.69747899159664 %\n",
      "====================================================\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     Negatif       0.85      0.58      0.69        59\n",
      "     Positif       0.90      0.97      0.94       229\n",
      "\n",
      "    accuracy                           0.89       288\n",
      "   macro avg       0.87      0.78      0.81       288\n",
      "weighted avg       0.89      0.89      0.88       288\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "print(\"Support Vector Machine Acuracy:\", accuracy_score(test_Y_df2, predictionsSVM2)*100, \"%\")\n",
    "print(\"Support Vector Machine Precision:\", precision_score(test_Y_df2, predictionsSVM2, average=\"binary\", pos_label=\"Positif\")*100, \"%\")\n",
    "print(\"Support Vector Machine Recall:\", recall_score(test_Y_df2, predictionsSVM2, average=\"binary\", pos_label=\"Positif\")*100, \"%\")\n",
    "print(\"Support Vector Machine f1_score:\", f1_score(test_Y_df2, predictionsSVM2, average=\"binary\", pos_label=\"Positif\")*100, \"%\")\n",
    "print('====================================================\\n')\n",
    "print (classification_report(test_Y_df2, predictionsSVM))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ab98926c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Support Vector Machine Acuracy: 90.6 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "\n",
    "print(\"Support Vector Machine Acuracy:\", SVMaccuracy, \"%\")\n",
    "\n",
    "conf_mat = confusion_matrix(test_Y_df, predictionsSVM)\n",
    "class_label = [\"Negative\",\"Positive\"]\n",
    "test =pd.DataFrame(conf_mat, index = class_label, columns = class_label)\n",
    "sns.heatmap(test, annot = True, fmt = \"d\")\n",
    "plt.title(\"Confusion Matrix for test data Support Vector Machine\")\n",
    "plt.xlabel(\"Predicted Label\")\n",
    "plt.ylabel(\"True Label\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ee867050-e633-4cd3-b4c2-e20c8044188c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Support Vector Machine Acuracy: 90.6 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "\n",
    "print(\"Support Vector Machine Acuracy:\", SVMaccuracy, \"%\")\n",
    "\n",
    "conf_mat = confusion_matrix(test_Y_df2, predictionsSVM2)\n",
    "class_label = [\"Negative\",\"Positive\"]\n",
    "test =pd.DataFrame(conf_mat, index = class_label, columns = class_label)\n",
    "sns.heatmap(test, annot = True, fmt = \"d\")\n",
    "plt.title(\"Confusion Matrix for test data Support Vector Machine\")\n",
    "plt.xlabel(\"Predicted Label\")\n",
    "plt.ylabel(\"True Label\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
